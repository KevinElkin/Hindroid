{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignments 2 and 3 Notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import urllib.request\n",
    "import numpy as np\n",
    "from collections import defaultdict\n",
    "import simplejson as json\n",
    "import collections\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "import random\n",
    "import glob\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import io\n",
    "from sklearn.svm import LinearSVC\n",
    "import gzip\n",
    "import random\n",
    "import os\n",
    "import itertools\n",
    "import pathlib\n",
    "import re \n",
    "from scipy import sparse\n",
    "from sklearn import svm\n",
    "from scipy.stats import uniform\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/kelkin/EDA/APK_Downloads/'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "A method that creates the necessary file structure that will be used to\n",
    "store the APK downloads\n",
    "'''\n",
    "\n",
    "def createDir():\n",
    "\n",
    "    cwd = os.getcwd()\n",
    "    file = str(cwd) + '/EDA'\n",
    "    file2 = file + '/APK_Downloads/'\n",
    "\n",
    "    if os.path.isdir(file) == False:\n",
    "        os.mkdir(file)\n",
    "        if os.path.isdir(file2) == False:\n",
    "            os.mkdir(file2)\n",
    "\n",
    "    return file2\n",
    "\n",
    "PATH = createDir()\n",
    "PATH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# To get the same amount of malware apps \n",
    "\n",
    "def countBenign(dic):\n",
    "    List_flat = list(itertools.chain(*dic.values()))\n",
    "    return len(List_flat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'.ipynb_checkpoints': [],\n",
       " 'tools': ['tools_31',\n",
       "  'tools_0',\n",
       "  'tools_22',\n",
       "  'tools_28',\n",
       "  'tools_17',\n",
       "  'tools_41',\n",
       "  'tools_32',\n",
       "  'tools_3',\n",
       "  'tools_13',\n",
       "  'tools_14',\n",
       "  'tools_42',\n",
       "  'tools_35',\n",
       "  'tools_40',\n",
       "  'tools_16',\n",
       "  'tools_24',\n",
       "  'tools_23',\n",
       "  'tools_11',\n",
       "  'tools_30',\n",
       "  '.ipynb_checkpoints',\n",
       "  'tools_1',\n",
       "  'tools_34',\n",
       "  'tools_15',\n",
       "  'tools_20',\n",
       "  'tools_18',\n",
       "  'tools_39',\n",
       "  'tools_44'],\n",
       " 'comics': ['comics_22',\n",
       "  'comics_28',\n",
       "  'comics_31',\n",
       "  'comics_25',\n",
       "  'comics_2',\n",
       "  'comics_17',\n",
       "  'comics_6',\n",
       "  'comics_19',\n",
       "  'comics_13',\n",
       "  'comics_21',\n",
       "  '.ipynb_checkpoints',\n",
       "  'comics_26',\n",
       "  'comics_14',\n",
       "  'comics_1',\n",
       "  'comics_3',\n",
       "  'comics_16',\n",
       "  'comics_30',\n",
       "  'comics_11',\n",
       "  'comics_4',\n",
       "  'comics_29',\n",
       "  'comics_27',\n",
       "  'comics_15',\n",
       "  'comics_0',\n",
       "  'comics_7',\n",
       "  'comics_12',\n",
       "  'comics_20']}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get immediate subdirectories of each subdirectories from above. Key is the catagory of app and value is the app name\n",
    "#gives you all the apps for a given catagory\n",
    "\n",
    "def catagoryApps(path):\n",
    "    \n",
    "    #get immediate subdirectories of PATH \n",
    "    list_subfolders_with_paths = [f.path for f in os.scandir(PATH) if f.is_dir()]\n",
    "    directDic = {}\n",
    "\n",
    "    for direct in list_subfolders_with_paths:\n",
    "        subdirs = []\n",
    "        for sub in os.scandir(direct):\n",
    "            if sub.is_dir():\n",
    "                subdirs.append(sub.name)\n",
    "        directDic[direct.split(\"/\")[-1]] = subdirs\n",
    "\n",
    "    return directDic\n",
    "\n",
    "directDic = catagoryApps(PATH)\n",
    "directDic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def malware_app_paths():\n",
    "#     malware_loc = []\n",
    "#     dir_list = os.listdir(\"/datasets/dsc180a-wi20-public/Malware/amd_data_smali\")\n",
    "#     for i in dir_list:\n",
    "#         string = '/datasets/dsc180a-wi20-public/Malware/amd_data_smali/' + i\n",
    "#         lis = os.listdir(string)\n",
    "#         for variety in lis:\n",
    "#             new_string = string + '/' + variety\n",
    "#             app_list = os.listdir(new_string)\n",
    "#             for app in app_list:\n",
    "#                 final_str = new_string + '/' + app\n",
    "#                 malware_loc.append(final_str)\n",
    "#     return malware_loc\n",
    "# mal = malware_app_paths()[:7]\n",
    "# mal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Data Structure (make_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def getAPICalls(catagory, appName, methodIDCount, invokeType)\n",
    "#     methodID = 'method_' + str(methodIDCount)\n",
    "#     methodList.append(line)\n",
    "#     catDict[catagory][appName]['Methods'][methodID] = methodList\n",
    "#     result = re.sub(pat, '', s)\n",
    "#     result = result[2:-2]\n",
    "                \n",
    "\n",
    "#gets each app name in the catagory \n",
    "\n",
    "#next steps - 1) open up directory for each app name 2) find the smali file in this directory \n",
    "\n",
    "\n",
    "patAPI = re.compile('^[^}]*}')\n",
    "patPack = re.compile('^(.*?)->')\n",
    "parChar = re.compile('[^(]*')\n",
    "\n",
    "def dataStructureHelper(catagory, appName, line, methodIDCount, catDict, invokeType):\n",
    "\n",
    "    \n",
    "    methodID = 'method_' + str(methodIDCount)\n",
    "    result = re.sub(patAPI, '', str(line))\n",
    "    apiCall = result[2:]\n",
    "    apiNoParam = re.match(parChar, apiCall)\n",
    "\n",
    "\n",
    "    apiCall = apiNoParam.group(0) + str('()')\n",
    "    package = re.search(patPack, apiCall)\n",
    "\n",
    "    catDict[catagory][appName]['Packages'][package.group(1)].append(apiCall)\n",
    "    catDict[catagory][appName]['All_APIs']['APIs'].append(apiCall)\n",
    "    catDict[catagory][appName]['Invoke_Type'][invokeType].append(apiCall)\n",
    "    catDict[catagory][appName]['Methods'][methodID].append(apiCall)\n",
    "\n",
    "\n",
    "def getUniqueAPIs(catDict, catagory, appName):\n",
    "    \n",
    "    #get the set of all APIs for an app with the same invoke type and put them into a list\n",
    "    invokeTypes = ['invoke-static', 'invoke-virtual', 'invoke-direct', 'invoke-super', 'invoke-interface']\n",
    "    \n",
    "    for invoke in invokeTypes:\n",
    "        catDict[catagory][appName]['Invoke_Type'][invoke] = list(set(catDict[catagory][appName]['Invoke_Type'][invoke]))\n",
    "    \n",
    "    #get the set of all APIs for an app that are called in the application\n",
    "    catDict[catagory][appName]['All_APIs']['APIs'] = list(set(catDict[catagory][appName]['All_APIs']['APIs']))\n",
    "    \n",
    "    #get the set of all packages in an app that are used in an application\n",
    "    for pack in catDict[catagory][appName]['Packages']:\n",
    "        catDict[catagory][appName]['Packages'][pack] = list(set(catDict[catagory][appName]['Packages'][pack]))\n",
    "        \n",
    "\n",
    "'''\n",
    "A method that creates a json object of the data structure \n",
    "\n",
    "'''    \n",
    "def createDataStructure(path):\n",
    "\n",
    "    catDict = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: defaultdict(list))))\n",
    "\n",
    "\n",
    "    methodIDCount = 0\n",
    "    methodList = []\n",
    "    inMethod = False\n",
    "    methodID = 'method_' + str(methodIDCount)\n",
    "    \n",
    "    \n",
    "    startMethod = '.method'\n",
    "    endMethod = '.end method'\n",
    "    \n",
    "\n",
    "    \n",
    "    directDic = catagoryApps(path)\n",
    "    for catagory in directDic:\n",
    "\n",
    "        for appName in directDic[catagory]:\n",
    "            #get path of appname in dir\n",
    "            newPath = PATH + str(catagory) + '/' + str(appName) + '/' + 'smali'\n",
    "            if os.path.isdir(newPath):\n",
    "                #go into smali file and get all the .methods and .endmethods using regex\n",
    "                #assign unique id for each method (key) which will have a list of API calls for the values\n",
    "                samliFiles = glob.glob(newPath + '/**/*.smali', recursive=True)\n",
    "                #read each smali file and get the method calls \n",
    "                for file in samliFiles:\n",
    "                    f = open(file, \"r\")\n",
    "                    Lines = f.readlines()\n",
    "                    for line in Lines:\n",
    "                        if startMethod in line:\n",
    "                            inMethod = True\n",
    "\n",
    "                        if inMethod and (endMethod in line):\n",
    "                            inMethod = False\n",
    "                            methodIDCount += 1\n",
    "                            methodList = []\n",
    "\n",
    "                        if (inMethod) and ('invoke-static' in line): \n",
    "                            invokeType = 'invoke-static'\n",
    "                            dataStructureHelper(catagory, appName, line, methodIDCount, catDict, invokeType)\n",
    "\n",
    "                        if (inMethod) and ('invoke-virtual' in line):\n",
    "                            invokeType = 'invoke-virtual'\n",
    "                            dataStructureHelper(catagory, appName, line, methodIDCount, catDict, invokeType)\n",
    "\n",
    "                        if (inMethod) and ('invoke-direct' in line): \n",
    "                            invokeType = 'invoke-direct'\n",
    "                            dataStructureHelper(catagory, appName, line, methodIDCount, catDict, invokeType)\n",
    "\n",
    "                        if (inMethod) and ('invoke-super' in line): \n",
    "                            invokeType = 'invoke-super'\n",
    "                            dataStructureHelper(catagory, appName, line, methodIDCount, catDict, invokeType)\n",
    "\n",
    "                        if (inMethod) and ('invoke-interface' in line):\n",
    "                            invokeType = 'invoke-interface'\n",
    "                            dataStructureHelper(catagory, appName, line, methodIDCount, catDict, invokeType)\n",
    "\n",
    "            getUniqueAPIs(catDict, catagory, appName)\n",
    "            \n",
    "    return catDict\n",
    "\n",
    "catDict = createDataStructure(PATH)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Ljava/lang/Integer;->intValue()',\n",
       " 'Ljava/lang/Integer;->intValue()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->pow()',\n",
       " 'Ljava/lang/Math;->round()',\n",
       " 'Ljava/lang/Math;->round()',\n",
       " 'Ljava/lang/Math;->round()',\n",
       " 'Ljava/lang/Math;->round()',\n",
       " 'Ljava/lang/Integer;->valueOf()']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the APIs called in the same method for one of the codeblocks found \n",
    "# (this is for the tools catagory and the tools_31 app)\n",
    "catDict['tools']['tools_31']['Methods']['method_113']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get Index Locations for Matricies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "656"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get a list of every possible api call in all the apps and take the set of it. This will be the \n",
    "def allAPIsDataset(catDict):\n",
    "    \n",
    "    allAPIs = []\n",
    "    for catagory in catDict:\n",
    "        for appName in catDict[catagory]:\n",
    "            allAPIs = allAPIs + list(catDict[catagory][appName]['All_APIs']['APIs'])\n",
    "    allAPIs = list(set(allAPIs))\n",
    "    \n",
    "    return allAPIs\n",
    "\n",
    "# Make a new dictionary containing unique API and there index\n",
    "def uniqueDict(jsonFile):\n",
    "\n",
    "    UniqueIDAPI = {}\n",
    "    idMaker = 0\n",
    "    for i in allAPIsDataset(jsonFile):\n",
    "        UniqueIDAPI[i] = idMaker\n",
    "        idMaker += 1\n",
    "    \n",
    "    return UniqueIDAPI\n",
    "\n",
    "UniqueIDAPI = uniqueDict(catDict)\n",
    "\n",
    "#For demonstration: Show unique ID of this API in the dictionary\n",
    "UniqueIDAPI['Lde/shellfire/vpn/android/MainTabletActivity$ServerSelectSectionFragment;->getResources()']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get all the possible app names \n",
    "def allApps(jsonFile):\n",
    "    \n",
    "    allApps = []\n",
    "    for catagory in catDict:\n",
    "        allApps = allApps + list(catDict[catagory])\n",
    "    return allApps\n",
    "\n",
    "# Make a new dictionary containing unique apps and there index\n",
    "def UniqueApps(jsonFile): \n",
    "    \n",
    "    UniqueIDApp = {}\n",
    "    idMakerApp = 0\n",
    "    \n",
    "    for i in allApps(jsonFile):\n",
    "        UniqueIDApp[i] = idMakerApp\n",
    "        idMakerApp += 1\n",
    "    \n",
    "    return UniqueIDApp\n",
    "\n",
    "UniqueIDApp = UniqueApps(catDict)\n",
    "\n",
    "#For demonstration: Show unique ID of this app in the dictionary\n",
    "UniqueIDApp['comics_28']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A-Matrix, B-Matrix, P-Matrix, I-Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "IOPub data rate exceeded.\n",
      "The notebook server will temporarily stop sending output\n",
      "to the client in order to avoid crashing it.\n",
      "To change this limit, set the config variable\n",
      "`--NotebookApp.iopub_data_rate_limit`.\n",
      "\n",
      "Current values:\n",
      "NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n",
      "NotebookApp.rate_limit_window=3.0 (secs)\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<52x341052 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 1033856 stored elements in COOrdinate format>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sparse MatrixA\n",
    "def aMatrixSparse(catDict):\n",
    "    \n",
    "    appIdxRows = []\n",
    "    apiIdxCols = []\n",
    "    data = []\n",
    "    \n",
    "    for catagory in catDict:\n",
    "        for appName in catDict[catagory]:\n",
    "            print(catDict[catagory][appName])\n",
    "            for api in list(catDict[catagory][appName]['All_APIs']['APIs']):\n",
    "                appIdxRows.append(UniqueIDApp[appName])\n",
    "                apiIdxCols.append(UniqueIDAPI[api])\n",
    "                data.append(1)\n",
    "                \n",
    "    return sparse.coo_matrix((data, (appIdxRows, apiIdxCols)))\n",
    "\n",
    "aMatrix = aMatrixSparse(catDict)\n",
    "aMatrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the adjacency matrix for methods that exist in the same code block MatrixB\n",
    "def bMatrixSparse(catDict):\n",
    "    \n",
    "    appIdxRows = []\n",
    "    apiIdxCols = []\n",
    "    data = []\n",
    "\n",
    "    for catagory in catDict:\n",
    "        for appName in catDict[catagory]:\n",
    "            keylist = list(catDict[catagory][appName]['Methods'].keys())\n",
    "            methodList = [[item for item in catDict[catagory][appName]['Methods'][key]] for key in keylist]\n",
    "\n",
    "            for i in methodList:\n",
    "                for j in i:\n",
    "                    for k in i:\n",
    "                        appIdxRows.append(UniqueIDAPI[j])\n",
    "                        apiIdxCols.append(UniqueIDAPI[k])\n",
    "                        data.append(1)\n",
    "                        \n",
    "                        appIdxRows.append(UniqueIDAPI[k])\n",
    "                        apiIdxCols.append(UniqueIDAPI[j])\n",
    "                        data.append(1)\n",
    "                        \n",
    "    return sparse.coo_matrix((data, (appIdxRows, apiIdxCols)))\n",
    "\n",
    "bMatrix = bMatrixSparse(catDict)\n",
    "bMatrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the adjacency matrix for methods that exist in the same package MatrixP\n",
    "def pMatrixSparse(catDict):\n",
    "    \n",
    "    appIdxRows = []\n",
    "    apiIdxCols = []\n",
    "    data = []\n",
    "\n",
    "    for catagory in catDict:\n",
    "        for appName in catDict[catagory]:\n",
    "            keylist = list(catDict[catagory][appName]['Packages'].keys())\n",
    "            packageList = [[item for item in catDict[catagory][appName]['Packages'][key]] for key in keylist]\n",
    "\n",
    "            for i in packageList:\n",
    "                for j in i:\n",
    "                    for k in i:\n",
    "                        appIdxRows.append(UniqueIDAPI[j])\n",
    "                        apiIdxCols.append(UniqueIDAPI[k])\n",
    "                        data.append(1)\n",
    "                        \n",
    "                        appIdxRows.append(UniqueIDAPI[k])\n",
    "                        apiIdxCols.append(UniqueIDAPI[j])\n",
    "                        data.append(1)\n",
    "                        \n",
    "    return sparse.coo_matrix((data, (appIdxRows, apiIdxCols)))\n",
    "\n",
    "pMatrix = pMatrixSparse(catDict)\n",
    "pMatrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def iMatrixSparse(catDict, UniqueIDAPI):\n",
    "\n",
    "    appIdxRows = []\n",
    "    apiIdxCols = []\n",
    "    data = []\n",
    "\n",
    "    #Find the adjacency matrix for methods that exist in the same invoke method MatrixI\n",
    "    print(\"Creating The I-Matrix....\")\n",
    "    for catagory in tqdm(catDict):\n",
    "        for appName in catDict[catagory]:\n",
    "            keylist = list(catDict[catagory][appName]['Invoke_Type'].keys())\n",
    "            invokeList = [[item for item in catDict[catagory][appName]['Invoke_Type'][key]] for key in keylist]\n",
    "\n",
    "            for i in invokeList:\n",
    "                for j in i:\n",
    "                    for k in i:\n",
    "                        appIdxRows.append(UniqueIDAPI[j])\n",
    "                        apiIdxCols.append(UniqueIDAPI[k])\n",
    "                        data.append(1)\n",
    "\n",
    "                        appIdxRows.append(UniqueIDAPI[k])\n",
    "                        apiIdxCols.append(UniqueIDAPI[j])\n",
    "                        data.append(1)\n",
    "\n",
    "    return sparse.coo_matrix((data, (appIdxRows, apiIdxCols)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Kernel multiplication\n",
    "\n",
    "# Transpose\n",
    "def trans(Matrix):\n",
    "    return Matrix.transpose()\n",
    "\n",
    "# AA^T\n",
    "def AAtrans(MatrixA, MatrixATrans):\n",
    "    return MatrixA.dot(MatrixATrans)\n",
    "\n",
    "# # ABA^T\n",
    "def ABAtrans(MatrixA, MatrixB, MatrixATrans):\n",
    "    AdotB = MatrixA.dot(MatrixB)\n",
    "    return AdotB.dot(MatrixATrans)\n",
    "\n",
    "# # APA^T\n",
    "def APAtrans(MatrixA, MatrixP, MatrixATrans):\n",
    "    AdotP = MatrixA.dot(MatrixP)\n",
    "    return AdotP.dot(MatrixATrans)\n",
    "\n",
    "# APBP^TA^T\n",
    "def APBPtransAtrans(MatrixA, MatrixB, MatrixP, MatrixATrans, MatrixPTrans):\n",
    "    AdotP = MatrixA.dot(MatrixP)\n",
    "    AdotPdotB = AdotP.dot(MatrixB)\n",
    "    prevDotPtrans = AdotPdotB.dot(MatrixPTrans)\n",
    "    prevDotAtrans = prevDotPtrans.dot(MatrixATrans)\n",
    "    return prevDotAtrans\n",
    "    \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createSVM(ker):\n",
    "    \n",
    "    df = pd.DataFrame(ker)\n",
    "    df['Classification_id'] = UniqueIDApp.keys()\n",
    "    df['Classification_id'] = df['Classification_id'].apply(lambda x: 'malware' if 'Malware' in x else 'benign')\n",
    "\n",
    "    feature_cols = df.iloc[:,:-1]\n",
    "    X = feature_cols # Features\n",
    "    y = df['Classification_id'] # Target variable\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)\n",
    "    clf = LinearSVC(random_state=0, tol=1e-5)\n",
    "    clf.fit(X_train, y_train)\n",
    "    clf.score(X_test, y_test)\n",
    "    accuracy = fitted.score(X_test, y_test)\n",
    "    print('----------------------------------------------------------')\n",
    "    print('Accuracy:  ' + str(accuracy))\n",
    "    print('----------------------------------------------------------')\n",
    "    f1 = f1_score(y_test, pred, average='weighted')\n",
    "    print('F1_score:  ' + str(f1))\n",
    "    tn, fp, fn, tp = confusion_matrix(y_test, pred).ravel()\n",
    "    print('Confusion_matrix')\n",
    "    print('----------------------------------------------------------')\n",
    "    print('tn: ' + str(tn) + '  |  fp: ' + str(fp) + '  |  tn: ' + str(tn) + '  |  tp: ' + str(tp))\n",
    "    return accuracy\n",
    "\n",
    "print('AA^T')\n",
    "createSVM(AAtrans(aMatrix, aMatrix.T).toarray())\n",
    "print('----------------------------------------------------------')\n",
    "print('\\n')\n",
    "print('ABA^T')\n",
    "createSVM(ABAtrans(aMatrix, bMatrix, aMatrix.T).toarray())\n",
    "print('----------------------------------------------------------')\n",
    "print('\\n')\n",
    "print('APA^T')\n",
    "createSVM(APAtrans(aMatrix, pMatrix, aMatrix.T).toarray())\n",
    "print('----------------------------------------------------------')\n",
    "print('\\n')\n",
    "print('APBP^TA^T')\n",
    "createSVM(APBPtransAtrans(aMatrix, bMatrix, pMatrix, aMatrix.T, pMatrix.T).toarray())\n",
    "print('----------------------------------------------------------')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA and Baseline model (Improved from Assignment 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique API count by Catagory\n",
      "\n",
      "totalNumUniqueTools: 198806\n",
      "\n",
      "totalNumUniqueComics: 219463\n",
      "\n",
      "avgUniqueTools: 7952.24\n",
      "\n",
      "avgUniqueComics: 8778.52\n",
      "\n",
      "----------------------------------------------------\n",
      "\n",
      "Number of Packages by type per catagory\n",
      "\n",
      "totalNumPackTools: 337325\n",
      "\n",
      "totalNumPackComics: 696531\n",
      "\n",
      "avgUniquePackTools: 13493.0\n",
      "\n",
      "avgUniquePackComics: 27861.24\n",
      "\n",
      "----------------------------------------------------\n",
      "\n",
      "Average number of API calls by invoke type\n",
      "\n",
      "staticToolsAvg: 2137.44\n",
      "\n",
      "virtualToolsAvg: 6616.64\n",
      "\n",
      "directToolsAvg: 3483.2\n",
      "\n",
      "superToolsAvg: 442.64\n",
      "\n",
      "interfaceToolsAvg: 1308.84\n",
      "\n",
      "----------------------------------------------------\n",
      "\n",
      "staticComicsAvg: 4862.72\n",
      "\n",
      "virtualComicsAvg: 13356.8\n",
      "\n",
      "directComicsAvg: 7265.48\n",
      "\n",
      "superComicsAvg: 741.08\n",
      "\n",
      "interfaceComicsAvg: 2514.2\n",
      "\n",
      "----------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "### Get the number of unique API calls \n",
    "catagory1 = 'tools'\n",
    "catagory2 = 'comics'\n",
    "\n",
    "numCat = countBenign(directDic)/2 - 1\n",
    "catagory1Count = int(numCat)\n",
    "catagory2Count = int(numCat)\n",
    "\n",
    "cat1List = []\n",
    "cat2List = []\n",
    "cat1CountAPI = []\n",
    "cat2CountAPI = []\n",
    "cat1Pack = []\n",
    "cat2Pack = []\n",
    "cat1ListPack = 0\n",
    "cat2ListPack = 0\n",
    "\n",
    "cat1Static = 0\n",
    "cat1Virtual = 0\n",
    "cat1Direct = 0\n",
    "cat1Super = 0\n",
    "cat1Inter = 0\n",
    "\n",
    "cat2Static = 0\n",
    "cat2Virtual = 0\n",
    "cat2Direct = 0\n",
    "cat2Super = 0\n",
    "cat2Inter = 0\n",
    "\n",
    "invokeTypes = ['invoke-static', 'invoke-virtual', 'invoke-direct', 'invoke-super', 'invoke-interface']\n",
    "\n",
    "for appName in catDict[catagory1]:\n",
    "    cat1List = cat1List + list(catDict[catagory1][appName]['All_APIs']['APIs'])\n",
    "    cat1CountAPI.append(len(list(catDict[catagory1][appName]['All_APIs']['APIs'])))\n",
    "\n",
    "cat1List = set(cat1List)\n",
    "\n",
    "\n",
    "\n",
    "for appName in catDict[catagory2]:\n",
    "    cat2List = cat2List + list(catDict[catagory2][appName]['All_APIs']['APIs'])\n",
    "    cat2CountAPI.append(len(list(catDict[catagory2][appName]['All_APIs']['APIs'])))\n",
    "cat2List = set(cat2List)\n",
    "\n",
    "\n",
    "\n",
    "totalNumUnique1 = len(cat1List)\n",
    "totalNumUnique2 = len(cat2List)\n",
    "\n",
    "print('Unique API count by Catagory\\n')\n",
    "\n",
    "print('totalNumUniqueTools: ' + str(totalNumUnique1) +'\\n')\n",
    "print('totalNumUniqueComics: ' + str(totalNumUnique2) +'\\n')\n",
    "\n",
    "avgUnique1 = totalNumUnique1 / catagory1Count\n",
    "avgUnique2 = totalNumUnique2 / catagory2Count\n",
    "\n",
    "print('avgUniqueTools: ' + str(avgUnique1) +'\\n')\n",
    "print('avgUniqueComics: ' + str(avgUnique2) +'\\n')\n",
    "print('----------------------------------------------------\\n')\n",
    "\n",
    "### Get the total number of Packages\n",
    "print('Number of Packages by type per catagory\\n')\n",
    "for appName in catDict[catagory1]:\n",
    "    for pack in catDict[catagory1][appName]['Packages']:\n",
    "        cat1ListPack = cat1ListPack + len(list(catDict[catagory1][appName]['Packages'][pack]))\n",
    "        cat1Pack.append(len((catDict[catagory1][appName]['Packages'][pack])))\n",
    "\n",
    "\n",
    "for appName in catDict[catagory2]:\n",
    "     for pack in catDict[catagory2][appName]['Packages']:\n",
    "        cat2ListPack = cat2ListPack + len(list(catDict[catagory2][appName]['Packages'][pack]))\n",
    "        cat2Pack.append(len((catDict[catagory2][appName]['Packages'][pack])))\n",
    "\n",
    "\n",
    "\n",
    "totalNumPack1 = cat1ListPack\n",
    "totalNumPack2 = cat2ListPack\n",
    "\n",
    "print('totalNumPackTools: ' + str(totalNumPack1) +'\\n')\n",
    "print('totalNumPackComics: ' + str(totalNumPack2) +'\\n')\n",
    "\n",
    "avgUniquePack1 = totalNumPack1 / catagory1Count\n",
    "avgUniquePack2 = totalNumPack2 / catagory2Count\n",
    "\n",
    "print('avgUniquePackTools: ' + str(avgUniquePack1) +'\\n')\n",
    "print('avgUniquePackComics: ' + str(avgUniquePack2) +'\\n')\n",
    "print('----------------------------------------------------\\n')\n",
    "### Number of API calls by type per catagory\n",
    "\n",
    "for appName in catDict[catagory1]:\n",
    "\n",
    "    cat1Static = cat1Static + len(list(catDict[catagory1][appName]['Invoke_Type']['invoke-static']))\n",
    "    cat1Virtual = cat1Virtual + len(list(catDict[catagory1][appName]['Invoke_Type']['invoke-virtual']))\n",
    "    cat1Direct = cat1Direct + len(list(catDict[catagory1][appName]['Invoke_Type']['invoke-direct']))\n",
    "    cat1Super = cat1Super + len(list(catDict[catagory1][appName]['Invoke_Type']['invoke-super']))\n",
    "    cat1Inter = cat1Inter + len(list(catDict[catagory1][appName]['Invoke_Type']['invoke-interface']))\n",
    "\n",
    "for appName in catDict[catagory2]:\n",
    "\n",
    "    cat2Static = cat2Static + len(list(catDict[catagory2][appName]['Invoke_Type']['invoke-static']))\n",
    "    cat2Virtual = cat2Virtual + len(list(catDict[catagory2][appName]['Invoke_Type']['invoke-virtual']))\n",
    "    cat2Direct = cat2Direct + len(list(catDict[catagory2][appName]['Invoke_Type']['invoke-direct']))\n",
    "    cat2Super = cat2Super + len(list(catDict[catagory2][appName]['Invoke_Type']['invoke-super']))\n",
    "    cat2Inter = cat2Inter + len(list(catDict[catagory2][appName]['Invoke_Type']['invoke-interface']))\n",
    "\n",
    "### Average number of API calls by invoke type \n",
    "\n",
    "static1Avg = cat1Static / catagory1Count\n",
    "virtual1Avg = cat1Virtual / catagory1Count\n",
    "direct1Avg = cat1Direct / catagory1Count\n",
    "super1Avg = cat1Super / catagory1Count\n",
    "interface1Avg = cat1Inter / catagory1Count\n",
    "\n",
    "static2Avg = cat2Static / catagory2Count\n",
    "virtual2Avg = cat2Virtual / catagory2Count\n",
    "direct2Avg = cat2Direct / catagory2Count\n",
    "super2Avg = cat2Super / catagory2Count\n",
    "interface2Avg = cat2Inter / catagory2Count\n",
    "\n",
    "print('Average number of API calls by invoke type\\n')\n",
    "print('staticToolsAvg: ' + str(static1Avg) +'\\n')\n",
    "print('virtualToolsAvg: ' + str(virtual1Avg) +'\\n')\n",
    "print('directToolsAvg: ' + str(direct1Avg) +'\\n')\n",
    "print('superToolsAvg: ' + str(super1Avg) +'\\n')\n",
    "print('interfaceToolsAvg: ' + str(interface1Avg) +'\\n')\n",
    "print('----------------------------------------------------\\n')\n",
    "\n",
    "print('staticComicsAvg: ' + str(static2Avg) +'\\n')\n",
    "print('virtualComicsAvg: ' + str(virtual2Avg) +'\\n')\n",
    "print('directComicsAvg: ' + str(direct2Avg) +'\\n')\n",
    "print('superComicsAvg: ' + str(super2Avg) +'\\n')\n",
    "print('interfaceComicsAvg: ' + str(interface2Avg) +'\\n')\n",
    "print('----------------------------------------------------\\n')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Number of APIs for the comics catagory by App')"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(cat2CountAPI, bins=30)\n",
    "plt.xlabel(\"Number of Unique APIs\")\n",
    "plt.title('Number of APIs for the comics catagory by App')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Number of APIs for the tools catagory by App')"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(cat1CountAPI, bins=30)\n",
    "plt.xlabel(\"Number of Unique APIs\")\n",
    "plt.title('Number of APIs for the tools catagory by App')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a Baseline Model to classify type of app catagory based on there invoke type counts and there number of unique packages\n",
    "catagory = [0,0,0,0,1,1,1,1,1,1,1,1,1]\n",
    "staticBeautyLi = []\n",
    "virtualBeautyLi = []\n",
    "directBeautyLi = []\n",
    "superBeautyLi = []\n",
    "interfaceBeautyLi = []\n",
    "\n",
    "staticComicsLi = []\n",
    "virtualComicsLi = []\n",
    "directComicsLi = []\n",
    "superComicsLi = []\n",
    "interfaceComicsLi = []\n",
    "\n",
    "uniqueComicPack = []\n",
    "uniqueBeautyPack = []\n",
    "\n",
    "comicsAppName = []\n",
    "beautyAppName = []\n",
    "\n",
    "for appName in catDict['comics']:\n",
    "    superComicsLi.append(len(list(catDict['comics'][appName]['Invoke_Type']['invoke-super'])))\n",
    "    interfaceComicsLi.append(len(list(catDict['comics'][appName]['Invoke_Type']['invoke-interface'])))\n",
    "    directComicsLi.append(len(list(catDict['comics'][appName]['Invoke_Type']['invoke-direct'])))\n",
    "    virtualComicsLi.append(len(list(catDict['comics'][appName]['Invoke_Type']['invoke-virtual'])))\n",
    "    staticComicsLi.append(len(list(catDict['comics'][appName]['Invoke_Type']['invoke-static'])))\n",
    "    comicsAppName.append(appName)\n",
    "    \n",
    "for appName in catDict['beauty']:\n",
    "    superBeautyLi.append(len(list(catDict['beauty'][appName]['Invoke_Type']['invoke-super'])))\n",
    "    interfaceBeautyLi.append(len(list(catDict['beauty'][appName]['Invoke_Type']['invoke-interface'])))\n",
    "    directBeautyLi.append(len(list(catDict['beauty'][appName]['Invoke_Type']['invoke-direct'])))\n",
    "    virtualBeautyLi.append(len(list(catDict['beauty'][appName]['Invoke_Type']['invoke-virtual'])))\n",
    "    staticBeautyLi.append(len(list(catDict['beauty'][appName]['Invoke_Type']['invoke-static'])))\n",
    "    beautyAppName.append(appName)\n",
    "    \n",
    "interfaceBeautyLi = interfaceBeautyLi[:4]\n",
    "directBeautyLi = directBeautyLi[:4]\n",
    "virtualBeautyLi = virtualBeautyLi[:4]\n",
    "staticBeautyLi = staticBeautyLi[:4]\n",
    "superBeautyLi = superBeautyLi[:4]\n",
    "beautyAppName = beautyAppName[:4] \n",
    "\n",
    "\n",
    "comicsAppName = comicsAppName[1:10]\n",
    "superComicsLi = superComicsLi[1:10]\n",
    "interfaceComicsLi = interfaceComicsLi[1:10]\n",
    "directComicsLi = directComicsLi[1:10]\n",
    "virtualComicsLi = virtualComicsLi[1:10]\n",
    "staticComicsLi = staticComicsLi[1:10]\n",
    "\n",
    "beautyAppName = beautyAppName + comicsAppName\n",
    "interfaceBeautyLi = interfaceBeautyLi + interfaceComicsLi\n",
    "directBeautyLi = directBeautyLi + directComicsLi\n",
    "virtualBeautyLi = virtualBeautyLi + virtualComicsLi\n",
    "superBeautyLi = superBeautyLi + superComicsLi\n",
    "staticBeautyLi = staticBeautyLi + staticComicsLi\n",
    "\n",
    "\n",
    "\n",
    "df = pd.DataFrame()\n",
    "df['AppName'] = beautyAppName\n",
    "df['Interface Invoke'] = interfaceBeautyLi\n",
    "df['Direct Invoke'] = directBeautyLi\n",
    "df['Virtual Invoke'] = virtualBeautyLi\n",
    "df['Super Invoke'] = superBeautyLi\n",
    "df['Static Invoke'] = staticBeautyLi\n",
    "df['label'] = catagory\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_cols = ['Interface Invoke', 'Direct Invoke', 'Virtual Invoke', 'Super Invoke','Static Invoke']\n",
    "X = df[feature_cols] # Features\n",
    "y = df.label # Target variable\n",
    "\n",
    "logreg = RandomForestClassifier()\n",
    "fitted = logreg.fit(X,y)\n",
    "pred = fitted.predict(X)\n",
    "fitted.score(X,y)\n",
    "f1 = f1_score(y, pred, average='weighted')\n",
    "f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "x = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: defaultdict(list))))\n",
    "\n",
    "x['outer']['appname']['Invoke_Type']['invoke-virtual'].append('sdf')\n",
    "x['outer']['appname']['Invoke_Type']['invoke-virtual'] = set(x['outer']['appname']['Invoke_Type']['invoke-virtual'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "line = 'Landroid/text/StaticLayout;->getHeight()'\n",
    "patPack = re.compile('(.+?);')\n",
    "res = re.match(patPack, line)\n",
    "type(res.group(1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = '/Users/kelkin/Documents/DSC_180A/APK_Downloads/comics/comics_3/smali/com/squareup/picasso/Utils.smali'\n",
    "\n",
    "file1 = open(p, 'r') \n",
    "Lines = file1.readlines() \n",
    "inMethod = False  \n",
    "count = 0\n",
    "startMethod = '.method'\n",
    "endMethod = '.end method'\n",
    "# Strips the newline character \n",
    "for line in Lines: \n",
    "    if startMethod in line:\n",
    "        inMethod = True\n",
    "    if inMethod:\n",
    "        \n",
    "    print(line.strip()) \n",
    "    print(\"Line{}: {}\".format(count, line.strip())) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "{\n",
    "    catagory:\n",
    "            {\n",
    "                appName:\n",
    "                        {\n",
    "                            Packages: {\n",
    "                                      pack_1: [API1, API2, ...] \n",
    "                                      pack_2: [API1, API2, ...]  \n",
    "                                      .....\n",
    "                                      }\n",
    "                            \n",
    "                            Methods:\n",
    "                                    {\n",
    "                                      method_1: [API1, API2, ...] \n",
    "                                      method_2: [API1, API2, ...]  \n",
    "                                      .....\n",
    "                                    }\n",
    "                            \n",
    "                            Invoke Type:\n",
    "                                    {\n",
    "                                      invoke_super: [API1, API2, ...]\n",
    "                                      invoke_virtual: [API1, API2, ...]\n",
    "                                    }\n",
    "                            All_APIs: [API1, API2, ...]\n",
    "                        }\n",
    "            }\n",
    "    \n",
    "    \n",
    "    \n",
    "}\n",
    "'''"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
